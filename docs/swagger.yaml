basePath: /
definitions:
  handlers.HealthResponse:
    properties:
      migrations:
        $ref: '#/definitions/handlers.MigrationStatus'
      services:
        additionalProperties:
          $ref: '#/definitions/handlers.ServiceHealth'
        type: object
      status:
        type: string
      timestamp:
        type: string
      version:
        type: string
    type: object
  handlers.MigrationInfo:
    properties:
      description:
        type: string
      version:
        type: integer
    type: object
  handlers.MigrationStatus:
    properties:
      applied:
        items:
          $ref: '#/definitions/handlers.MigrationInfo'
        type: array
      count:
        type: integer
    type: object
  handlers.ServiceHealth:
    properties:
      error:
        type: string
      response_time:
        type: string
      status:
        type: string
    type: object
  models.APIError:
    properties:
      details:
        type: string
      error:
        type: string
      message:
        type: string
    type: object
  models.AddBlockRequest:
    properties:
      block_type:
        $ref: '#/definitions/models.BlockType'
      description:
        type: string
      estimated_length:
        maximum: 480
        minimum: 1
        type: integer
      event_id:
        type: string
      guest_ids:
        items:
          type: string
        type: array
      media:
        items:
          $ref: '#/definitions/models.BlockMediaInput'
        type: array
      metadata:
        additionalProperties: true
        type: object
      order_index:
        type: integer
      title:
        maxLength: 255
        minLength: 1
        type: string
      topic:
        type: string
    required:
    - estimated_length
    - event_id
    - title
    type: object
  models.AddBlockResponse:
    properties:
      data:
        $ref: '#/definitions/models.BlockDetail'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.AddPostRequest:
    properties:
      link:
        type: string
    required:
    - link
    type: object
  models.AddPostResponse:
    properties:
      content_id:
        type: string
      media_count:
        type: integer
      message:
        type: string
      processing_status:
        $ref: '#/definitions/models.PostStatus'
      status:
        type: string
    type: object
  models.AddRoleToUserResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  models.AutocompleteData:
    properties:
      query:
        type: string
      suggestions:
        items:
          $ref: '#/definitions/models.GuestSuggestion'
        type: array
      total_matches:
        type: integer
    type: object
  models.AutocompleteResponse:
    properties:
      data:
        $ref: '#/definitions/models.AutocompleteData'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.BlockDetail:
    properties:
      actual_length:
        type: integer
      block_type:
        $ref: '#/definitions/models.BlockType'
      created_at:
        type: string
      description:
        type: string
      estimated_length:
        description: in minutes
        type: integer
      event_id:
        type: string
      guests:
        items:
          $ref: '#/definitions/models.BlockGuestDetail'
        type: array
      id:
        type: string
      media:
        items:
          $ref: '#/definitions/models.BlockMediaDetail'
        type: array
      metadata:
        additionalProperties: true
        type: object
      order_index:
        type: integer
      status:
        $ref: '#/definitions/models.BlockStatus'
      title:
        type: string
      topic:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.BlockGuestDetail:
    properties:
      id:
        type: string
      name:
        type: string
      notes:
        type: string
      primary_contact:
        $ref: '#/definitions/models.GuestContact'
      role:
        type: string
      short_name:
        type: string
      surname:
        type: string
    type: object
  models.BlockInfoData:
    properties:
      block:
        $ref: '#/definitions/models.BlockDetail'
      event_info:
        $ref: '#/definitions/models.EventSummary'
    type: object
  models.BlockMediaDetail:
    properties:
      description:
        type: string
      file_name:
        type: string
      file_size:
        type: integer
      media_id:
        type: string
      media_type:
        type: string
      order_index:
        type: integer
      s3_url:
        type: string
      title:
        type: string
    type: object
  models.BlockMediaInput:
    properties:
      description:
        type: string
      media_id:
        type: string
      media_type:
        type: string
      order_index:
        type: integer
      title:
        type: string
    required:
    - media_id
    - media_type
    type: object
  models.BlockOrder:
    properties:
      block_id:
        type: string
      order_index:
        minimum: 0
        type: integer
    required:
    - block_id
    - order_index
    type: object
  models.BlockOrderSummary:
    properties:
      block_id:
        type: string
      order_index:
        type: integer
      title:
        type: string
    type: object
  models.BlockStatus:
    enum:
    - planned
    - ready
    - in_progress
    - completed
    - skipped
    type: string
    x-enum-varnames:
    - BlockStatusPlanned
    - BlockStatusReady
    - BlockStatusInProgress
    - BlockStatusCompleted
    - BlockStatusSkipped
  models.BlockSummary:
    properties:
      actual_length:
        type: integer
      block_type:
        $ref: '#/definitions/models.BlockType'
      estimated_length:
        type: integer
      guest_count:
        type: integer
      id:
        type: string
      media_count:
        type: integer
      order_index:
        type: integer
      status:
        $ref: '#/definitions/models.BlockStatus'
      title:
        type: string
      topic:
        type: string
    type: object
  models.BlockType:
    enum:
    - intro
    - main
    - interview
    - qa
    - break
    - outro
    - custom
    type: string
    x-enum-varnames:
    - BlockTypeIntro
    - BlockTypeMain
    - BlockTypeInterview
    - BlockTypeQA
    - BlockTypeBreak
    - BlockTypeOutro
    - BlockTypeCustom
  models.ContactType:
    enum:
    - email
    - phone
    - telegram
    - discord
    - twitter
    - linkedin
    - instagram
    - website
    - other
    type: string
    x-enum-varnames:
    - ContactTypeEmail
    - ContactTypePhone
    - ContactTypeTelegram
    - ContactTypeDiscord
    - ContactTypeTwitter
    - ContactTypeLinkedIn
    - ContactTypeInstagram
    - ContactTypeWebsite
    - ContactTypeOther
  models.CreateGuestRequest:
    properties:
      avatar:
        type: string
      contacts:
        items:
          $ref: '#/definitions/models.GuestContact'
        type: array
      metadata:
        additionalProperties: true
        type: object
      name:
        maxLength: 255
        minLength: 1
        type: string
      notes:
        type: string
      short_name:
        type: string
      surname:
        maxLength: 255
        minLength: 1
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - name
    - surname
    type: object
  models.CreateGuestResponse:
    properties:
      data:
        $ref: '#/definitions/models.Guest'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.CreateRoleRequest:
    properties:
      description:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        maxLength: 100
        minLength: 1
        type: string
      permissions:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - name
    - permissions
    type: object
  models.CreateRoleResponse:
    properties:
      data:
        $ref: '#/definitions/models.Role'
      success:
        type: boolean
    type: object
  models.CreateShowRequest:
    properties:
      additional_key:
        type: string
      first_event_date:
        type: string
      length_minutes:
        maximum: 1440
        minimum: 1
        type: integer
      metadata:
        additionalProperties: true
        type: object
      repeat_pattern:
        $ref: '#/definitions/models.RepeatPattern'
      scheduling_config:
        $ref: '#/definitions/models.SchedulingConfig'
      show_name:
        maxLength: 255
        minLength: 1
        type: string
      start_time:
        type: string
      youtube_key:
        type: string
      zoom_meeting_id:
        type: string
      zoom_meeting_url:
        type: string
      zoom_passcode:
        type: string
    required:
    - first_event_date
    - length_minutes
    - repeat_pattern
    - show_name
    - start_time
    - youtube_key
    type: object
  models.CreateShowResponse:
    properties:
      data:
        $ref: '#/definitions/models.Show'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
      password:
        minLength: 8
        type: string
      surname:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - email
    - name
    - password
    - surname
    type: object
  models.CreateUserResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
      success:
        type: boolean
    type: object
  models.DateRange:
    properties:
      end:
        type: string
      start:
        type: string
    type: object
  models.DeleteBlockData:
    properties:
      block_id:
        type: string
      deleted_at:
        type: string
      remaining_blocks_reordered:
        type: boolean
    type: object
  models.DeleteBlockRequest:
    properties:
      block_id:
        type: string
      reorder_remaining:
        type: boolean
    required:
    - block_id
    type: object
  models.DeleteBlockResponse:
    properties:
      data:
        $ref: '#/definitions/models.DeleteBlockData'
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  models.DeleteEventRequest:
    properties:
      cancellation_reason:
        type: string
      event_id:
        type: string
    required:
    - event_id
    type: object
  models.DeleteEventResponse:
    properties:
      data:
        $ref: '#/definitions/models.EventDeleteData'
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  models.DeleteGuestRequest:
    properties:
      guest_id:
        type: string
    required:
    - guest_id
    type: object
  models.DeleteGuestResponse:
    properties:
      data:
        $ref: '#/definitions/models.GuestDeleteData'
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  models.DeleteMediaRequest:
    properties:
      media_id:
        type: string
    required:
    - media_id
    type: object
  models.DeleteMediaResponse:
    properties:
      media_id:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  models.DeleteRoleRequest:
    properties:
      role_id:
        type: string
    required:
    - role_id
    type: object
  models.DeleteRoleResponse:
    properties:
      data:
        $ref: '#/definitions/models.RoleDeleteData'
      message:
        type: string
      success:
        type: boolean
    type: object
  models.DeleteShowRequest:
    properties:
      show_id:
        type: string
    required:
    - show_id
    type: object
  models.DeleteShowResponse:
    properties:
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  models.DeleteUserRequest:
    properties:
      force:
        type: boolean
    type: object
  models.DeleteUserResponse:
    properties:
      data:
        $ref: '#/definitions/models.UserDeleteData'
      message:
        type: string
      success:
        type: boolean
    type: object
  models.DeviceInfo:
    properties:
      device_name:
        type: string
      device_type:
        type: string
      ip_address:
        type: string
      user_agent:
        type: string
    type: object
  models.Event:
    properties:
      additional_key:
        type: string
      created_at:
        description: Audit fields
        type: string
      custom_fields:
        additionalProperties: true
        type: object
      end_datetime:
        type: string
      event_description:
        type: string
      event_title:
        description: Event details (can override show defaults)
        type: string
      generated_at:
        description: Generation tracking
        type: string
      id:
        type: string
      is_customized:
        type: boolean
      last_synced_at:
        type: string
      length_minutes:
        type: integer
      show_id:
        type: string
      show_version:
        type: integer
      start_datetime:
        description: Timing (can override show defaults)
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.EventStatus'
        description: Event metadata
      updated_at:
        type: string
      user_id:
        type: string
      youtube_key:
        type: string
      zoom_meeting_id:
        type: string
      zoom_meeting_url:
        type: string
      zoom_passcode:
        type: string
    type: object
  models.EventBlocksData:
    properties:
      blocks:
        items:
          $ref: '#/definitions/models.BlockSummary'
        type: array
      event_id:
        type: string
      total_actual_time:
        type: integer
      total_blocks:
        type: integer
      total_estimated_time:
        type: integer
    type: object
  models.EventBlocksResponse:
    properties:
      data:
        $ref: '#/definitions/models.EventBlocksData'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.EventDeleteData:
    properties:
      cancelled_at:
        type: string
      event_id:
        type: string
      status:
        $ref: '#/definitions/models.EventStatus'
    type: object
  models.EventFilters:
    properties:
      date_range:
        $ref: '#/definitions/models.DateRange'
      is_customized:
        type: boolean
      show_ids:
        items:
          type: string
        type: array
      status:
        items:
          $ref: '#/definitions/models.EventStatus'
        type: array
    type: object
  models.EventInfoData:
    properties:
      event:
        $ref: '#/definitions/models.Event'
      show_details:
        $ref: '#/definitions/models.ShowSummary'
    type: object
  models.EventListData:
    properties:
      events:
        items:
          $ref: '#/definitions/models.EventListItem'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationResponse'
    type: object
  models.EventListItem:
    properties:
      end_datetime:
        type: string
      event_title:
        type: string
      has_zoom_meeting:
        type: boolean
      id:
        type: string
      is_customized:
        type: boolean
      show_id:
        type: string
      show_name:
        type: string
      start_datetime:
        type: string
      status:
        $ref: '#/definitions/models.EventStatus'
    type: object
  models.EventListRequest:
    properties:
      filters:
        $ref: '#/definitions/models.EventFilters'
      pagination:
        $ref: '#/definitions/models.PaginationOptions'
      sort:
        $ref: '#/definitions/models.EventSortOptions'
    type: object
  models.EventListResponse:
    properties:
      data:
        $ref: '#/definitions/models.EventListData'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.EventSortOptions:
    properties:
      field:
        type: string
      order:
        type: string
    type: object
  models.EventStatus:
    enum:
    - scheduled
    - live
    - completed
    - cancelled
    - postponed
    type: string
    x-enum-varnames:
    - EventStatusScheduled
    - EventStatusLive
    - EventStatusCompleted
    - EventStatusCancelled
    - EventStatusPostponed
  models.EventSummary:
    properties:
      id:
        type: string
      show_name:
        type: string
      start_datetime:
        type: string
      total_blocks:
        type: integer
      total_estimated_time:
        type: integer
    type: object
  models.GetBlockInfoResponse:
    properties:
      data:
        $ref: '#/definitions/models.BlockInfoData'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.GetEventInfoResponse:
    properties:
      data:
        $ref: '#/definitions/models.EventInfoData'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.GetGuestInfoResponse:
    properties:
      data:
        $ref: '#/definitions/models.GuestInfoData'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.GetLinkListRequest:
    properties:
      content_id:
        type: string
    required:
    - content_id
    type: object
  models.GetLinkMediaRequest:
    properties:
      media_id:
        type: string
    required:
    - media_id
    type: object
  models.GetLinkMediaURIRequest:
    properties:
      expiry_minutes:
        type: integer
      media_id:
        type: string
    required:
    - media_id
    type: object
  models.GetLinkMediaURIResponse:
    properties:
      expires_at:
        type: string
      media_id:
        type: string
      s3_url:
        type: string
    type: object
  models.GetRoleInfoResponse:
    properties:
      data:
        $ref: '#/definitions/models.RoleWithUserCount'
      success:
        type: boolean
    type: object
  models.GetShowInfoResponse:
    properties:
      data:
        $ref: '#/definitions/models.ShowInfoData'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.GetUserInfoResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
      success:
        type: boolean
    type: object
  models.GoogleCallbackRequest:
    properties:
      code:
        type: string
      device_info:
        $ref: '#/definitions/models.DeviceInfo'
      state:
        type: string
    required:
    - code
    - state
    type: object
  models.GoogleCallbackResponse:
    properties:
      data:
        $ref: '#/definitions/models.GoogleCallbackResponseData'
      success:
        type: boolean
    type: object
  models.GoogleCallbackResponseData:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      is_new_user:
        type: boolean
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/models.UserWithRoles'
    type: object
  models.GoogleLinkRequest:
    properties:
      id_token:
        type: string
    required:
    - id_token
    type: object
  models.GoogleLinkResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  models.GoogleLoginResponse:
    properties:
      data:
        $ref: '#/definitions/models.GoogleLoginResponseData'
      success:
        type: boolean
    type: object
  models.GoogleLoginResponseData:
    properties:
      auth_url:
        type: string
      state:
        type: string
    type: object
  models.Guest:
    properties:
      avatar:
        type: string
      contacts:
        items:
          $ref: '#/definitions/models.GuestContact'
        type: array
      created_at:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      notes:
        type: string
      short_name:
        type: string
      surname:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.GuestContact:
    properties:
      is_primary:
        type: boolean
      label:
        type: string
      type:
        $ref: '#/definitions/models.ContactType'
      value:
        type: string
    type: object
  models.GuestDeleteData:
    properties:
      deleted_at:
        type: string
      guest_id:
        type: string
    type: object
  models.GuestFilters:
    properties:
      created_date_range:
        $ref: '#/definitions/models.DateRange'
      has_contact_type:
        items:
          $ref: '#/definitions/models.ContactType'
        type: array
      search:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  models.GuestInfoData:
    properties:
      guest:
        $ref: '#/definitions/models.Guest'
      stats:
        $ref: '#/definitions/models.GuestStats'
    type: object
  models.GuestListItem:
    properties:
      avatar:
        type: string
      contact_count:
        type: integer
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      notes_preview:
        type: string
      primary_email:
        type: string
      short_name:
        type: string
      surname:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  models.GuestSortOptions:
    properties:
      field:
        type: string
      order:
        type: string
    type: object
  models.GuestStats:
    properties:
      last_appearance:
        type: string
      total_shows:
        type: integer
      upcoming_shows:
        type: integer
    type: object
  models.GuestSuggestion:
    properties:
      avatar:
        type: string
      display_name:
        type: string
      id:
        type: string
      match_score:
        type: number
      name:
        type: string
      primary_contact:
        $ref: '#/definitions/models.GuestContact'
      short_name:
        type: string
      surname:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  models.ListGuestsData:
    properties:
      guests:
        items:
          $ref: '#/definitions/models.GuestListItem'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationResponse'
    type: object
  models.ListGuestsRequest:
    properties:
      filters:
        $ref: '#/definitions/models.GuestFilters'
      pagination:
        $ref: '#/definitions/models.PaginationOptions'
      sort:
        $ref: '#/definitions/models.GuestSortOptions'
    type: object
  models.ListGuestsResponse:
    properties:
      data:
        $ref: '#/definitions/models.ListGuestsData'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.ListRolesData:
    properties:
      pagination:
        $ref: '#/definitions/models.PaginationResponse'
      roles:
        items:
          $ref: '#/definitions/models.RoleListItem'
        type: array
      total:
        type: integer
    type: object
  models.ListRolesRequest:
    properties:
      filters:
        $ref: '#/definitions/models.RoleFilters'
      pagination:
        $ref: '#/definitions/models.PaginationOptions'
      sort:
        $ref: '#/definitions/models.RoleSortOptions'
    type: object
  models.ListRolesResponse:
    properties:
      data:
        $ref: '#/definitions/models.ListRolesData'
      success:
        type: boolean
    type: object
  models.ListShowsData:
    properties:
      pagination:
        $ref: '#/definitions/models.PaginationResponse'
      shows:
        items:
          $ref: '#/definitions/models.ShowListItem'
        type: array
    type: object
  models.ListShowsFilters:
    properties:
      repeat_pattern:
        items:
          $ref: '#/definitions/models.RepeatPattern'
        type: array
      search:
        type: string
      status:
        items:
          $ref: '#/definitions/models.ShowStatus'
        type: array
    type: object
  models.ListShowsRequest:
    properties:
      filters:
        $ref: '#/definitions/models.ListShowsFilters'
      pagination:
        $ref: '#/definitions/models.PaginationOptions'
      sort:
        $ref: '#/definitions/models.ListShowsSortOptions'
    type: object
  models.ListShowsResponse:
    properties:
      data:
        $ref: '#/definitions/models.ListShowsData'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.ListShowsSortOptions:
    properties:
      field:
        type: string
      order:
        type: string
    type: object
  models.ListUsersData:
    properties:
      pagination:
        $ref: '#/definitions/models.PaginationResponse'
      users:
        items:
          $ref: '#/definitions/models.UserListItem'
        type: array
    type: object
  models.ListUsersRequest:
    properties:
      filters:
        $ref: '#/definitions/models.UserFilters'
      pagination:
        $ref: '#/definitions/models.PaginationOptions'
      sort:
        $ref: '#/definitions/models.UserSortOptions'
    type: object
  models.ListUsersResponse:
    properties:
      data:
        $ref: '#/definitions/models.ListUsersData'
      success:
        type: boolean
    type: object
  models.LoginRequest:
    properties:
      device_info:
        $ref: '#/definitions/models.DeviceInfo'
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/models.LoginResponseData'
      success:
        type: boolean
    type: object
  models.LoginResponseData:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/models.UserWithRoles'
    type: object
  models.LogoutRequest:
    properties:
      logout_all_devices:
        type: boolean
      refresh_token:
        type: string
    type: object
  models.LogoutResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  models.MediaListItem:
    properties:
      file_name:
        type: string
      file_size:
        type: integer
      file_type:
        type: string
      media_id:
        type: string
      upload_date:
        type: string
    type: object
  models.MediaListResponse:
    properties:
      content_id:
        type: string
      link:
        type: string
      media_files:
        items:
          $ref: '#/definitions/models.MediaListItem'
        type: array
    type: object
  models.MonthDay:
    properties:
      date:
        type: string
      day_number:
        type: integer
      events:
        items:
          $ref: '#/definitions/models.MonthDayEvent'
        type: array
      events_count:
        type: integer
      is_current_month:
        type: boolean
    type: object
  models.MonthDayEvent:
    properties:
      duration_minutes:
        type: integer
      id:
        type: string
      is_customized:
        type: boolean
      show_name:
        type: string
      start_time:
        type: string
      status:
        $ref: '#/definitions/models.EventStatus'
    type: object
  models.MonthListData:
    properties:
      events_by_status:
        additionalProperties:
          type: integer
        type: object
      month:
        type: integer
      month_name:
        type: string
      timezone:
        type: string
      total_events:
        type: integer
      weeks:
        items:
          $ref: '#/definitions/models.MonthWeek'
        type: array
      year:
        type: integer
    type: object
  models.MonthListRequest:
    properties:
      filters:
        $ref: '#/definitions/models.EventFilters'
      month:
        maximum: 12
        minimum: 1
        type: integer
      timezone:
        type: string
      year:
        maximum: 2030
        minimum: 2020
        type: integer
    required:
    - month
    - year
    type: object
  models.MonthListResponse:
    properties:
      data:
        $ref: '#/definitions/models.MonthListData'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.MonthWeek:
    properties:
      days:
        items:
          $ref: '#/definitions/models.MonthDay'
        type: array
      week_number:
        type: integer
    type: object
  models.PaginationOptions:
    properties:
      limit:
        type: integer
      page:
        type: integer
      sort:
        type: string
    type: object
  models.PaginationResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  models.PostListItem:
    properties:
      added_at:
        type: string
      content_id:
        type: string
      link:
        type: string
      media_count:
        type: integer
      status:
        $ref: '#/definitions/models.PostStatus'
    type: object
  models.PostListResponse:
    properties:
      limit:
        type: integer
      links:
        items:
          $ref: '#/definitions/models.PostListItem'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  models.PostStatus:
    enum:
    - pending
    - processing
    - completed
    - failed
    type: string
    x-enum-varnames:
    - PostStatusPending
    - PostStatusProcessing
    - PostStatusCompleted
    - PostStatusFailed
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RefreshTokenResponse:
    properties:
      data:
        $ref: '#/definitions/models.TokenPair'
      success:
        type: boolean
    type: object
  models.RemoveRoleFromUserResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  models.ReorderBlocksData:
    properties:
      blocks:
        items:
          $ref: '#/definitions/models.BlockOrderSummary'
        type: array
      event_id:
        type: string
      total_estimated_time:
        type: integer
    type: object
  models.ReorderBlocksRequest:
    properties:
      block_orders:
        items:
          $ref: '#/definitions/models.BlockOrder'
        minItems: 1
        type: array
      event_id:
        type: string
    required:
    - block_orders
    - event_id
    type: object
  models.ReorderBlocksResponse:
    properties:
      data:
        $ref: '#/definitions/models.ReorderBlocksData'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.RepeatPattern:
    enum:
    - none
    - daily
    - weekly
    - biweekly
    - monthly
    - custom
    type: string
    x-enum-varnames:
    - RepeatNone
    - RepeatDaily
    - RepeatWeekly
    - RepeatBiweekly
    - RepeatMonthly
    - RepeatCustom
  models.RevokeSessionResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  models.Role:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
      status:
        $ref: '#/definitions/models.RoleStatus'
      updated_at:
        type: string
    type: object
  models.RoleDeleteData:
    properties:
      deleted_at:
        type: string
      role_id:
        type: string
    type: object
  models.RoleFilters:
    properties:
      permissions:
        items:
          type: string
        type: array
      search:
        type: string
      status:
        items:
          $ref: '#/definitions/models.RoleStatus'
        type: array
    type: object
  models.RoleInfo:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  models.RoleListItem:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
      status:
        $ref: '#/definitions/models.RoleStatus'
      user_count:
        type: integer
    type: object
  models.RoleSortOptions:
    properties:
      field:
        enum:
        - name
        - created_at
        - updated_at
        type: string
      order:
        enum:
        - asc
        - desc
        type: string
    required:
    - field
    - order
    type: object
  models.RoleStatus:
    enum:
    - active
    - inactive
    type: string
    x-enum-varnames:
    - RoleStatusActive
    - RoleStatusInactive
  models.RoleWithUserCount:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
      status:
        $ref: '#/definitions/models.RoleStatus'
      updated_at:
        type: string
      user_count:
        type: integer
    type: object
  models.SchedulingConfig:
    properties:
      monthly_day:
        description: For monthly patterns - calendar day-based
        type: integer
      monthly_day_fallback:
        description: '"last_day", "skip"'
        type: string
      monthly_week_number:
        description: 1, 2, 3, 4, or -1 for last
        type: integer
      monthly_weekday:
        description: For monthly patterns - weekday-based
        type: integer
      weekdays:
        description: For weekly and biweekly patterns
        items:
          type: integer
        type: array
    type: object
  models.SessionInfo:
    properties:
      created_at:
        type: string
      device_name:
        type: string
      device_type:
        type: string
      id:
        type: string
      ip_address:
        type: string
      is_current:
        type: boolean
      last_activity:
        type: string
      location:
        type: string
    type: object
  models.SessionListData:
    properties:
      sessions:
        items:
          $ref: '#/definitions/models.SessionInfo'
        type: array
    type: object
  models.SessionListResponse:
    properties:
      data:
        $ref: '#/definitions/models.SessionListData'
      success:
        type: boolean
    type: object
  models.Show:
    properties:
      additional_key:
        type: string
      created_at:
        type: string
      first_event_date:
        type: string
      id:
        type: string
      length_minutes:
        type: integer
      metadata:
        additionalProperties: true
        type: object
      repeat_pattern:
        $ref: '#/definitions/models.RepeatPattern'
      scheduling_config:
        $ref: '#/definitions/models.SchedulingConfig'
      show_name:
        type: string
      start_time:
        type: string
      status:
        $ref: '#/definitions/models.ShowStatus'
      updated_at:
        type: string
      user_id:
        type: string
      version:
        type: integer
      youtube_key:
        type: string
      zoom_meeting_id:
        type: string
      zoom_meeting_url:
        type: string
      zoom_passcode:
        type: string
    type: object
  models.ShowEvent:
    properties:
      date:
        type: string
      end_datetime:
        type: string
      start_datetime:
        type: string
    type: object
  models.ShowInfoData:
    properties:
      show:
        $ref: '#/definitions/models.Show'
      upcoming_events:
        items:
          $ref: '#/definitions/models.ShowEvent'
        type: array
    type: object
  models.ShowListItem:
    properties:
      first_event_date:
        type: string
      has_zoom_meeting:
        type: boolean
      id:
        type: string
      length_minutes:
        type: integer
      next_occurrence:
        type: string
      next_occurrences:
        items:
          type: string
        type: array
      repeat_pattern:
        $ref: '#/definitions/models.RepeatPattern'
      scheduling_config:
        $ref: '#/definitions/models.SchedulingConfig'
      show_name:
        type: string
      start_time:
        type: string
      status:
        $ref: '#/definitions/models.ShowStatus'
    type: object
  models.ShowStatus:
    enum:
    - active
    - paused
    - completed
    - cancelled
    type: string
    x-enum-varnames:
    - ShowStatusActive
    - ShowStatusPaused
    - ShowStatusCompleted
    - ShowStatusCancelled
  models.ShowSummary:
    properties:
      id:
        type: string
      repeat_pattern:
        $ref: '#/definitions/models.RepeatPattern'
      show_name:
        type: string
      status:
        $ref: '#/definitions/models.ShowStatus'
    type: object
  models.TokenPair:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  models.TokenVerificationData:
    properties:
      email:
        type: string
      expires_at:
        type: string
      roles:
        items:
          type: string
        type: array
      user_id:
        type: string
      valid:
        type: boolean
    type: object
  models.UpdateBlockRequest:
    properties:
      actual_length:
        type: integer
      block_id:
        type: string
      block_type:
        $ref: '#/definitions/models.BlockType'
      description:
        type: string
      estimated_length:
        type: integer
      guest_ids:
        items:
          type: string
        type: array
      media:
        items:
          $ref: '#/definitions/models.BlockMediaInput'
        type: array
      metadata:
        additionalProperties: true
        type: object
      status:
        $ref: '#/definitions/models.BlockStatus'
      title:
        type: string
      topic:
        type: string
    required:
    - block_id
    type: object
  models.UpdateBlockResponse:
    properties:
      data:
        $ref: '#/definitions/models.BlockDetail'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.UpdateEventRequest:
    properties:
      additional_key:
        type: string
      custom_fields:
        additionalProperties: true
        type: object
      event_description:
        type: string
      event_id:
        type: string
      event_title:
        type: string
      length_minutes:
        type: integer
      start_datetime:
        type: string
      youtube_key:
        type: string
      zoom_meeting_id:
        type: string
      zoom_meeting_url:
        type: string
      zoom_passcode:
        type: string
    required:
    - event_id
    type: object
  models.UpdateEventResponse:
    properties:
      data:
        $ref: '#/definitions/models.Event'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.UpdateGuestRequest:
    properties:
      avatar:
        type: string
      contacts:
        items:
          $ref: '#/definitions/models.GuestContact'
        type: array
      guest_id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      notes:
        type: string
      short_name:
        type: string
      surname:
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - guest_id
    type: object
  models.UpdateGuestResponse:
    properties:
      data:
        $ref: '#/definitions/models.Guest'
      error:
        type: string
      success:
        type: boolean
    type: object
  models.UpdateMediaRequest:
    properties:
      file_name:
        type: string
      media_id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      original_file_name:
        type: string
    required:
    - media_id
    type: object
  models.UpdateMediaResponse:
    properties:
      media_id:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  models.UpdateRoleRequest:
    properties:
      description:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        maxLength: 100
        minLength: 1
        type: string
      permissions:
        items:
          type: string
        type: array
      role_id:
        type: string
      status:
        $ref: '#/definitions/models.RoleStatus'
    required:
    - role_id
    type: object
  models.UpdateRoleResponse:
    properties:
      data:
        $ref: '#/definitions/models.Role'
      success:
        type: boolean
    type: object
  models.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
      surname:
        maxLength: 100
        minLength: 1
        type: string
    type: object
  models.UpdateUserResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
      success:
        type: boolean
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      last_login_at:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      oidc_provider:
        type: string
      oidc_subject:
        type: string
      status:
        $ref: '#/definitions/models.UserStatus'
      surname:
        type: string
      updated_at:
        type: string
    type: object
  models.UserDeleteData:
    properties:
      deleted_at:
        type: string
      user_id:
        type: string
    type: object
  models.UserFilters:
    properties:
      oidc_provider:
        type: string
      role_ids:
        items:
          type: string
        type: array
      search:
        type: string
      status:
        items:
          $ref: '#/definitions/models.UserStatus'
        type: array
    type: object
  models.UserListItem:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      last_login_at:
        type: string
      name:
        type: string
      status:
        $ref: '#/definitions/models.UserStatus'
      surname:
        type: string
    type: object
  models.UserSortOptions:
    properties:
      field:
        enum:
        - name
        - email
        - created_at
        - updated_at
        - last_login_at
        type: string
      order:
        enum:
        - asc
        - desc
        type: string
    required:
    - field
    - order
    type: object
  models.UserStatus:
    enum:
    - active
    - inactive
    - pending
    - suspended
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusInactive
    - UserStatusPending
    - UserStatusSuspended
  models.UserWithRoles:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      last_login_at:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      oidc_provider:
        type: string
      oidc_subject:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.RoleInfo'
        type: array
      status:
        $ref: '#/definitions/models.UserStatus'
      surname:
        type: string
      updated_at:
        type: string
    type: object
  models.VerifyTokenResponse:
    properties:
      data:
        $ref: '#/definitions/models.TokenVerificationData'
      success:
        type: boolean
    type: object
  models.WeekDay:
    properties:
      date:
        type: string
      day_name:
        type: string
      events:
        items:
          $ref: '#/definitions/models.WeekDayEvent'
        type: array
    type: object
  models.WeekDayEvent:
    properties:
      end_time:
        type: string
      event_title:
        type: string
      id:
        type: string
      is_customized:
        type: boolean
      show_name:
        type: string
      start_time:
        type: string
      status:
        $ref: '#/definitions/models.EventStatus'
    type: object
  models.WeekListData:
    properties:
      days:
        items:
          $ref: '#/definitions/models.WeekDay'
        type: array
      timezone:
        type: string
      total_events:
        type: integer
      week_end:
        type: string
      week_start:
        type: string
    type: object
  models.WeekListRequest:
    properties:
      filters:
        $ref: '#/definitions/models.EventFilters'
      timezone:
        type: string
      week_start:
        type: string
    required:
    - week_start
    type: object
  models.WeekListResponse:
    properties:
      data:
        $ref: '#/definitions/models.WeekListData'
      error:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: A Go-based microservice for planning and scheduling YouTube live streams.
    Helps content creators organize their streaming schedule and manage content.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: St. Planer - YouTube Stream Planner API
  version: "1.0"
paths:
  /api/v1/auth/google/callback:
    post:
      consumes:
      - application/json
      description: Process Google OAuth callback and create user session
      parameters:
      - description: Google callback data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GoogleCallbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GoogleCallbackResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Handle Google OAuth callback
      tags:
      - Authentication
  /api/v1/auth/google/link:
    post:
      consumes:
      - application/json
      description: Link a Google account to the currently authenticated user
      parameters:
      - description: Google ID token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GoogleLinkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GoogleLinkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - BearerAuth: []
      summary: Link Google account to existing user
      tags:
      - Authentication
  /api/v1/auth/google/login:
    get:
      description: Generate Google OAuth authorization URL
      parameters:
      - description: Redirect URI after Google auth
        in: query
        name: redirect_uri
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GoogleLoginResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Initiate Google OAuth login
      tags:
      - Authentication
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: User login with password
      tags:
      - Authentication
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate tokens
      parameters:
      - description: Logout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LogoutResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Authentication
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Exchange refresh token for new access token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Refresh access token
      tags:
      - Authentication
  /api/v1/auth/sessions:
    get:
      description: Retrieve all active sessions for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SessionListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - BearerAuth: []
      summary: Get user's active sessions
      tags:
      - Authentication
  /api/v1/auth/sessions/{session_id}:
    delete:
      description: Revoke a specific session by session ID
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RevokeSessionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - BearerAuth: []
      summary: Revoke a specific session
      tags:
      - Authentication
  /api/v1/auth/verify:
    get:
      description: Verify if the provided access token is valid
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VerifyTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - BearerAuth: []
      summary: Verify access token
      tags:
      - Authentication
  /api/v1/block/add:
    post:
      consumes:
      - application/json
      description: Create a new block with guests and media attachments
      parameters:
      - description: Block creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AddBlockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AddBlockResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add new block to event
      tags:
      - blocks
  /api/v1/block/delete:
    delete:
      consumes:
      - application/json
      description: Remove a block and optionally reorder remaining blocks
      parameters:
      - description: Block deletion data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.DeleteBlockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteBlockResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete block from event
      tags:
      - blocks
  /api/v1/block/info/{block_id}:
    get:
      description: Get detailed information about a specific block including guests
        and media
      parameters:
      - description: Block ID
        in: path
        name: block_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetBlockInfoResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get block details
      tags:
      - blocks
  /api/v1/block/reorder:
    put:
      consumes:
      - application/json
      description: Change the order of blocks within a specific event
      parameters:
      - description: Block reordering data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ReorderBlocksRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReorderBlocksResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Reorder blocks within an event
      tags:
      - blocks
  /api/v1/block/update:
    put:
      consumes:
      - application/json
      description: Update existing block with new information
      parameters:
      - description: Block update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBlockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateBlockResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update block information
      tags:
      - blocks
  /api/v1/event/{event_id}/blocks:
    get:
      description: Get ordered list of blocks for a specific event
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EventBlocksResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List all blocks for an event
      tags:
      - blocks
  /api/v1/event/delete:
    delete:
      consumes:
      - application/json
      description: Cancel a specific event while preserving show template
      parameters:
      - description: Event deletion data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.DeleteEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteEventResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Cancel/delete event
      tags:
      - events
  /api/v1/event/info/{event_id}:
    get:
      description: Get detailed information about a specific event including show
        details
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetEventInfoResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get event details
      tags:
      - events
  /api/v1/event/list:
    post:
      consumes:
      - application/json
      description: Get paginated list of events with filtering and sorting options
      parameters:
      - description: Event list filters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.EventListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EventListResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List events with filtering
      tags:
      - events
  /api/v1/event/monthList:
    post:
      consumes:
      - application/json
      description: Get events organized by weeks and days for a specific month
      parameters:
      - description: Month view request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MonthListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MonthListResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get month view of events
      tags:
      - events
  /api/v1/event/update:
    put:
      consumes:
      - application/json
      description: Update specific event with custom fields while preserving show
        inheritance
      parameters:
      - description: Event update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateEventResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update event details
      tags:
      - events
  /api/v1/event/weekList:
    post:
      consumes:
      - application/json
      description: Get events organized by days for a specific week
      parameters:
      - description: Week view request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.WeekListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.WeekListResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get week view of events
      tags:
      - events
  /api/v1/guest/autocomplete:
    get:
      description: Get guest suggestions for autocomplete functionality
      parameters:
      - description: Search query (minimum 2 characters)
        in: query
        name: q
        required: true
        type: string
      - description: 'Maximum results (default: 10, max: 50)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AutocompleteResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Guest autocomplete search
      tags:
      - guests
  /api/v1/guest/delete:
    delete:
      consumes:
      - application/json
      description: Delete a guest from the system
      parameters:
      - description: Guest deletion data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.DeleteGuestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteGuestResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete guest
      tags:
      - guests
  /api/v1/guest/info/{guest_id}:
    get:
      description: Get detailed information about a specific guest
      parameters:
      - description: Guest ID
        in: path
        name: guest_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetGuestInfoResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get guest details
      tags:
      - guests
  /api/v1/guest/list:
    post:
      consumes:
      - application/json
      description: Get paginated list of guests with filtering and sorting options
      parameters:
      - description: Guest list filters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ListGuestsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListGuestsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List guests with filtering
      tags:
      - guests
  /api/v1/guest/new:
    post:
      consumes:
      - application/json
      description: Create a new guest with contact information and notes
      parameters:
      - description: Guest creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateGuestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateGuestResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create new guest
      tags:
      - guests
  /api/v1/guest/update:
    put:
      consumes:
      - application/json
      description: Update existing guest with new information
      parameters:
      - description: Guest update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateGuestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateGuestResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update guest information
      tags:
      - guests
  /api/v1/media/get:
    delete:
      consumes:
      - application/json
      description: Delete media file from database and S3 storage
      parameters:
      - description: Media delete request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.DeleteMediaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteMediaResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete media file
      tags:
      - media
    post:
      consumes:
      - application/json
      description: Download specific media file from a post as binary stream. Supports
        range requests for video files to enable streaming and seeking.
      parameters:
      - description: Media download request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GetLinkMediaRequest'
      - description: Range header for partial content (e.g., bytes=0-1023)
        in: header
        name: Range
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Full file download
          schema:
            type: file
        "206":
          description: Partial content (range request)
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "416":
          description: Range Not Satisfiable
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Download specific media file
      tags:
      - media
    put:
      consumes:
      - application/json
      description: Update media file metadata including filename and custom metadata
      parameters:
      - description: Media update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateMediaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateMediaResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update media metadata
      tags:
      - media
  /api/v1/media/getDirect:
    post:
      consumes:
      - application/json
      description: Get direct S3 link for specific media with configurable expiration
      parameters:
      - description: Media URI request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GetLinkMediaURIRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetLinkMediaURIResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get S3 pre-signed URL for media
      tags:
      - media
  /api/v1/media/grab:
    post:
      consumes:
      - application/json
      description: Add a new Telegram post link or YouTube video URL to download media.
        Automatically detects the platform and processes accordingly.
      parameters:
      - description: Post link (Telegram or YouTube)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AddPostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AddPostResponse'
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/models.AddPostResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add a new Telegram or YouTube link for processing
      tags:
      - media
  /api/v1/media/links:
    post:
      consumes:
      - application/json
      description: Get list of all media files from a specific Telegram post or YouTube
        video
      parameters:
      - description: Content ID for post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GetLinkListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MediaListResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get media files from a specific post
      tags:
      - media
  /api/v1/media/list:
    get:
      consumes:
      - application/json
      description: Retrieve list of all previously processed Telegram and YouTube
        links
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Sort order
        enum:
        - created_at_desc
        - created_at_asc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostListResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get list of processed posts
      tags:
      - media
  /api/v1/roles/add:
    post:
      consumes:
      - application/json
      description: Create a new role with specified permissions
      parameters:
      - description: Role creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateRoleResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create new role
      tags:
      - roles
  /api/v1/roles/delete:
    delete:
      consumes:
      - application/json
      description: Delete a role if it has no associated users
      parameters:
      - description: Role deletion data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.DeleteRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteRoleResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - roles
  /api/v1/roles/info/{role_id}:
    get:
      description: Get detailed information about a specific role including user count
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetRoleInfoResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get role information
      tags:
      - roles
  /api/v1/roles/list:
    post:
      consumes:
      - application/json
      description: Get paginated list of roles with filters
      parameters:
      - description: List filters and options
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ListRolesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListRolesResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List roles
      tags:
      - roles
  /api/v1/roles/update:
    put:
      consumes:
      - application/json
      description: Update existing role details and permissions
      parameters:
      - description: Role update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateRoleResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update role information
      tags:
      - roles
  /api/v1/show/create:
    post:
      consumes:
      - application/json
      description: Create a new show with YouTube and Zoom integration for recurring
        streams
      parameters:
      - description: Show details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateShowRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateShowResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new show
      tags:
      - shows
  /api/v1/show/delete:
    delete:
      consumes:
      - application/json
      description: Soft delete a show by setting its status to cancelled
      parameters:
      - description: Show ID to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.DeleteShowRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteShowResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a show
      tags:
      - shows
  /api/v1/show/info/{show_id}:
    get:
      description: Get detailed information about a specific show including upcoming
        events
      parameters:
      - description: Show ID
        in: path
        name: show_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetShowInfoResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get show information
      tags:
      - shows
  /api/v1/show/list:
    post:
      consumes:
      - application/json
      description: Get a paginated list of shows with filtering and sorting options
      parameters:
      - description: List options
        in: body
        name: request
        schema:
          $ref: '#/definitions/models.ListShowsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListShowsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List shows
      tags:
      - shows
  /api/v1/users:
    get:
      description: Get paginated list of users with query parameters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Search by name or email
        in: query
        name: search
        type: string
      - description: Sort field
        in: query
        name: sort
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListUsersResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List users (RESTful)
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with simplified request format
      parameters:
      - description: User creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create new user (RESTful)
      tags:
      - users
  /api/v1/users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Soft or hard delete a user based on force parameter
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: User deletion data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.DeleteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteUserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete user (RESTful)
      tags:
      - users
    get:
      description: Get detailed information about a specific user without roles
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserInfoResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user information (RESTful)
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update existing user details with simplified request format
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user information (RESTful)
      tags:
      - users
  /api/v1/users/{user_id}/roles/{role_id}:
    delete:
      description: Remove a specific role from a user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RemoveRoleFromUserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove role from user
      tags:
      - users
    put:
      description: Add a specific role to a user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AddRoleToUserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add role to user
      tags:
      - users
  /api/v1/users/add:
    post:
      consumes:
      - application/json
      description: Create a new user with password or OIDC authentication
      parameters:
      - description: User creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create new user
      tags:
      - users
  /api/v1/users/delete:
    delete:
      consumes:
      - application/json
      description: Soft delete a user by setting status to inactive
      parameters:
      - description: User deletion data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.DeleteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteUserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
  /api/v1/users/info/{user_id}:
    get:
      description: Get detailed information about a specific user including roles
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserInfoResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user information
      tags:
      - users
  /api/v1/users/list:
    post:
      consumes:
      - application/json
      description: Get paginated list of users with filters
      parameters:
      - description: List filters and options
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ListUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListUsersResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
  /api/v1/users/update:
    put:
      consumes:
      - application/json
      description: Update existing user details and roles
      parameters:
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - users
  /health:
    get:
      description: Check the health of the service and its dependencies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HealthResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/handlers.HealthResponse'
      summary: Health check endpoint
      tags:
      - health
  /live:
    get:
      description: Check if the service is alive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Liveness check endpoint
      tags:
      - health
  /ready:
    get:
      description: Check if the service is ready to accept requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Service Unavailable
          schema:
            additionalProperties: true
            type: object
      summary: Readiness check endpoint
      tags:
      - health
securityDefinitions:
  ApiKeyAuth:
    description: API key authentication
    in: header
    name: X-API-Key
    type: apiKey
  BearerAuth:
    description: 'JWT Bearer token authentication. Format: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
